// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: seer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeerServiceClient is the client API for SeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeerServiceClient interface {
	GetSeerByUserUUID(ctx context.Context, in *SeerRequest, opts ...grpc.CallOption) (*SeerResponse, error)
	GetUserUUIDBySeerUUID(ctx context.Context, in *SeerUUIDRequest, opts ...grpc.CallOption) (*UserUUIDResponse, error)
}

type seerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeerServiceClient(cc grpc.ClientConnInterface) SeerServiceClient {
	return &seerServiceClient{cc}
}

func (c *seerServiceClient) GetSeerByUserUUID(ctx context.Context, in *SeerRequest, opts ...grpc.CallOption) (*SeerResponse, error) {
	out := new(SeerResponse)
	err := c.cc.Invoke(ctx, "/seer.SeerService/GetSeerByUserUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seerServiceClient) GetUserUUIDBySeerUUID(ctx context.Context, in *SeerUUIDRequest, opts ...grpc.CallOption) (*UserUUIDResponse, error) {
	out := new(UserUUIDResponse)
	err := c.cc.Invoke(ctx, "/seer.SeerService/GetUserUUIDBySeerUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeerServiceServer is the server API for SeerService service.
// All implementations must embed UnimplementedSeerServiceServer
// for forward compatibility
type SeerServiceServer interface {
	GetSeerByUserUUID(context.Context, *SeerRequest) (*SeerResponse, error)
	GetUserUUIDBySeerUUID(context.Context, *SeerUUIDRequest) (*UserUUIDResponse, error)
	mustEmbedUnimplementedSeerServiceServer()
}

// UnimplementedSeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeerServiceServer struct {
}

func (UnimplementedSeerServiceServer) GetSeerByUserUUID(context.Context, *SeerRequest) (*SeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeerByUserUUID not implemented")
}
func (UnimplementedSeerServiceServer) GetUserUUIDBySeerUUID(context.Context, *SeerUUIDRequest) (*UserUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUUIDBySeerUUID not implemented")
}
func (UnimplementedSeerServiceServer) mustEmbedUnimplementedSeerServiceServer() {}

// UnsafeSeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeerServiceServer will
// result in compilation errors.
type UnsafeSeerServiceServer interface {
	mustEmbedUnimplementedSeerServiceServer()
}

func RegisterSeerServiceServer(s grpc.ServiceRegistrar, srv SeerServiceServer) {
	s.RegisterService(&SeerService_ServiceDesc, srv)
}

func _SeerService_GetSeerByUserUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeerServiceServer).GetSeerByUserUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seer.SeerService/GetSeerByUserUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeerServiceServer).GetSeerByUserUUID(ctx, req.(*SeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeerService_GetUserUUIDBySeerUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeerUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeerServiceServer).GetUserUUIDBySeerUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seer.SeerService/GetUserUUIDBySeerUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeerServiceServer).GetUserUUIDBySeerUUID(ctx, req.(*SeerUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeerService_ServiceDesc is the grpc.ServiceDesc for SeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seer.SeerService",
	HandlerType: (*SeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeerByUserUUID",
			Handler:    _SeerService_GetSeerByUserUUID_Handler,
		},
		{
			MethodName: "GetUserUUIDBySeerUUID",
			Handler:    _SeerService_GetUserUUIDBySeerUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seer.proto",
}
